#!/usr/bin/python
# global imports
import sys
import argparse
from splinter import Browser

# local import
import config

class Colors:

    BLUE = '\033[94m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    END = '\033[0m'

# colors
blue = Colors.BLUE
green = Colors.GREEN
yellow = Colors.YELLOW
red = Colors.RED
end = Colors.END

# argument parser
parser = argparse.ArgumentParser(description="Crowbar auto testsuite, run it via 'gordon -a <address> -p <port>'")
parser.add_argument('address',
        help = "crowbar address, for example 192.168.0.2")
parser.add_argument('port',
        help = "crowbar port, for example 80, 3000")
args = parser.parse_args()
user_address = args.address
user_port = args.port

# 'production' browser
#browser = Browser('phantomjs')
# use real browser for test purposes
browser = Browser('chrome')

errors = 0

url = "http://"+ config.username + ":" + config.password + "@" + user_address + ":" + user_port
browser.visit(url)

# main functions
def checktext(text):

    global errors

    if browser.is_text_present(text):
        print(text + ' test ' + green + 'PASSED' + end)
    else:
        print(text + ' test ' + red + 'FAILED' + end)
        errors += 1 

def checkid(id):

    global errors

    if browser.is_element_present_by_id(id):
        print(id + ' test ' + green + 'PASSED' + end)
    else:
        print(id + ' test ' + red + 'FAILED' + end)
        errors += 1

def linkfnd(link):

    global errors

    if browser.find_link_by_href(link):
        print(link + ' test ' + green + 'PASSED' + end)
    else:
        print(link + ' test ' + red + 'FAILED' + end)
        errors += 1

def doctests(link, text):

    global errors

    browser.find_by_id("help").first.click()
    browser.click_link_by_partial_href(link)
    window = browser.windows[1]
    window.is_current = True
    checktext(text)
    window.close()

   
# check that we can create a new_group
browser.find_by_id('group').first.fill('new_group_1')
browser.find_by_name('commit').first.click()

# final output
print("Smoke tests")
print('============')
print('By text:')
print('********')
testsbytext = ['3 nodes', 'crowbar', 'dashboard']

for i in testsbytext:
    checktext(i)

print('By id:')
print('******')
testsbyid = ['nodes', 'dashboard', 'network', 'switch', 'vlan', 'barclamps', 'crowbar', 'openstack', 'utils',
        'queue', 'repositories', 'backup', 'logs', 'swift', 'ucs', 'help']

for i in testsbyid:
    checkid(i)

print()
print("Creating new group of nodes")
print("***************************")
checktext('new_group_1')

print()
print("Link tests")
print("***********")
links = ['http://www.suse.com', 'https://www.suse.com/cloud']
for i in links:
    linkfnd(i)

print()
print("Doc tests")
print("*********")
doctests('/docs/deployment', 'Architecture and Requirements')
doctests('/docs/user', 'OpenStack command-line clients')
doctests('/docs/admin', 'How can I administer an OpenStack cloud?')
doctests('docs/supplement', 'Changing the SUSE OpenStack Cloud Dashboard Theme')
#browser.back()

#window.next
#if browser.find_by_text('Deployment'):
#    print('found!')

print()
print("=======")
print(yellow + "Errors: " + str(errors) + end)


