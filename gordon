#!/usr/bin/python
# global imports
import sys
import argparse
import time
from configparser import SafeConfigParser
from splinter import Browser

class Colors:

    BLUE = '\033[94m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    END = '\033[0m'

# colors
blue = Colors.BLUE
green = Colors.GREEN
yellow = Colors.YELLOW
red = Colors.RED
end = Colors.END

# config parser
parser = SafeConfigParser()
parser.read('gordon.config')

if parser.has_option('credentials', 'username') and parser.has_option('credentials', 'password'):
    username = parser.get('credentials', 'username')
    password = parser.get('credentials', 'password')
else:
    print('You need to configure gordon.config first')
    sys.exit(1)

# argument parser
parser = argparse.ArgumentParser(description="Crowbar auto testsuite, run it via 'gordon -a <address> -p <port>'")
parser.add_argument('nodes',
        help = "amount of nodes, for example 4")
parser.add_argument('address',
        help = "crowbar address, for example 192.168.0.2")
parser.add_argument('port',
        help = "crowbar port, for example 80, 3000")
args = parser.parse_args()
user_nodes = str(args.nodes)
user_address = args.address
user_port = args.port

startTime = time.time()

# 'production' browser
#browser = Browser('phantomjs')
# use real browser for test purposes
browser = Browser('chrome')

url = "http://"+ username + ":" + password + "@" + user_address + ":" + user_port
print(url)
browser.visit(url)

class Checker(object):
    
    def __init__(self, browser):
        
        self.user_nodes = user_nodes
        self.browser = browser
        self.errors = 0
        self.success = 0

    def checktext(self, text):

        if self.browser.is_text_present(text):
            print("%-55s %s" % (text, green + 'PASSED' + end))
            self.success += 1
        else:
            print("%-55s %s" % (text, red + 'FAILED' + end))
            self.errors += 1

    def checkid(self, id):

        if self.browser.is_element_present_by_id(id):
            print("%-55s %s" % (id, green + 'PASSED' + end))
            self.success += 1
        else:
            print("%-55s %s" % (id, red + 'FAILED' + end))
            self.errors += 1

    def linkfnd_by_href(self, link):

        if self.browser.find_link_by_href(link):
            print("%-55s %s" % (link, green + 'PASSED' + end))
            self.success += 1
        else:
            print("%-55s %s" % (link, red + 'FAILED' + end))
            self.errors += 1

    def linkfnd_by_name(self, name):

        if self.browser.find_link_by_text(name):
            print("%-55s %s" % (name, green + 'PASSED' + end))
            self.success += 1
        else:
            print("%-55s %s" % (name, red + 'FAILED' + end))
            self.errors += 1

# new_window = boolean, means that we're creating new window in browser (True), or not (False)
    def chkdeep(self, id, link, new_window, text):
        
        self.browser.find_by_id(id).first.click()
        self.browser.click_link_by_partial_href(link)
        
        if new_window:
            window = self.browser.windows[1]
            window.is_current = True
            for i in text:
                self.checktext(i)
            window.close()
        else:
            for i in text:
                self.checktext(i) 

# Checking nodes status
    def chkstatus(self, css1, css2):
        
        if self.browser.find_by_css(css1) or self.browser.find_by_css(css2):
            print("%-55s %s" % ("Some nodes have a problem!", red + 'FAILED' + end))
            self.errors += 1
        else:
            print("%-55s %s" % ('Nodes are OK', green + 'PASSED' + end))
            self.success += 1

# searchtext - text that we need to search for, info - visible text for script output
    def mousemov(self, xpath, searchtext, info):
        
        time.sleep(1)
        browser.find_by_xpath(xpath).mouse_over()

        # we need OR because we can have 
        if browser.is_text_present(self.user_nodes + ' ' + searchtext) or browser.is_text_present(searchtext + ' ' + self.user_nodes): 
            print("%-55s %s" % (searchtext + info + self.user_nodes, green + 'PASSED' + end))
            self.success += 1
        else:
            print("%-55s %s" % (searchtext + info + self.user_nodes, red + 'FAILED' + end))
            self.errors += 1
        browser.find_by_xpath(xpath).mouse_out()

    def chkdragdrop(self, nodename1, nodename2, newarealink, targetlink, sourcelink):
        
        browser.find_by_id('group').first.fill('new_group_1')
        browser.find_by_name('commit').first.click()
        draggable1 = browser.find_link_by_href(nodename1).first
        draggable2 = browser.find_link_by_href(nodename2).first
        target = browser.find_by_xpath(targetlink)
        draggable1.drag_and_drop(target)
        draggable2.drag_and_drop(target)

        if browser.find_by_xpath(newarealink):
            print("%-55s %s" % ('New group was created', green + 'PASSED' + end))
            self.success += 1
        else:
            print("%-55s %s" % ("New group wasn't created", red + 'FAILED' + end))
            self.errors += 1

        source = browser.find_by_xpath(sourcelink)
        draggable1.drag_and_drop(source)

        # dirty hack, we need to reassign variable again
        draggable2 = browser.find_link_by_href(nodename2).first
        draggable2.drag_and_drop(source)

        browser.reload()
        time.sleep(1)

        if browser.find_by_xpath('//*[@id="nodegroups"]/div[2]/div/div/h2/span'):
            print("%-55s %s" % ("Group wasn't deleted", red + 'FAILED' + end))
            self.errors += 1
        else:
            print("%-55s %s" % ("Group was deleted", green + 'PASSED' + end))
            self.success += 1

        browser.reload()


def section_output(uline, title, body = lambda: {}):
    print()
    print(title)
    print(len(title) * uline)
    body()


ck = Checker(browser)

section_output('=', 'Main page tests')
section_output('-', 'By text', lambda:
    [ck.checktext(i) for i in [ user_nodes + ' nodes', 'crowbar', 'dashboard']]
)

# checking total nodes and ready nodes
section_output('-', 'Mouse tests', lambda: (
        ck.mousemov('//*[@id="nodegroups"]/div/div/div/h2/span', 'Total', ' nodes equal '),
        time.sleep(1),
        ck.mousemov('//*[@id="nodegroups"]/div/div/div/h2/span', 'Ready', ' nodes equal ')
))

section_output('-', 'By id', lambda:
    [ck.checkid(i) for i in [
        'nodes', 'dashboard', 'network', 'switch',
        'vlan', 'barclamps', 'crowbar', 'openstack',
        'utils', 'queue', 'repositories', 'backup',
        'logs', 'swift', 'ucs', 'help']]
)

section_output('-', 'Link tests', lambda:
    [ck.linkfnd_by_href(i) for i in ['http://www.suse.com', 'https://www.suse.com/cloud']]
)

section_output('-', 'Nodes status checks', lambda:
    ck.chkstatus('.led.unknown', '.led.unready')
)

section_output('=', 'Nodes section tests')

section_output('-', 'Bulk edit tests', lambda: (
    ck.chkdeep('nodes', '/nodes/list', False, ['crowbar']),
    browser.click_link_by_partial_href('/nodes/unallocated'),
    ck.checktext('No Items'),
    browser.back(),
    time.sleep(2)
))

section_output('-', 'Dashboard tests', lambda: (
    ck.chkdeep('nodes', '/dashboard', False, ['automatic grouping.']),
    time.sleep(1)
))

section_output('-', 'Active Roles tests', lambda:
    ck.chkdeep('nodes', '/active_roles', False, [
        'ceilometer-agent', 'ceilometer-central', 'ceilometer-server',
        'cinder-controller','cinder-volume', 'database-server', 'glance-server', 
        'heat-server', 'horizon-server', 'keystone-server', 'manila-server', 
        'manila-share', 'neutron-server', 'neutron-network', 'nova-controller', 
        'nova-compute-kvm', 'rabbitmq-server', 'tempest', 'trove-server']
))

section_output('-', 'Roles status checks', lambda: (
    ck.chkstatus('.led.unknown', '.led.unready'),
    browser.back()
))

section_output('=', 'Network section tests')

section_output('-', 'Switches', lambda: (
    ck.chkdeep('network', '/network/switch/default', False, ['Virtual:eth0']),
    browser.back(),
    time.sleep(2)
))

section_output('-', 'VLANs', lambda: (
    ck.chkdeep('network', '/network/vlan/default', False, ['Active VLAN']),
    browser.back(),
    time.sleep(2)
))

section_output('=', 'Barclamps section tests')

section_output('-', 'All Barclamps', lambda: (
    ck.chkdeep('barclamps', '/crowbar/modules/1.0', False, [
        'Crowbar', 'Deployer', 'Provisioner', 'IPMI', 'Network',
        'DNS', 'Logging', 'NTP', 'Pacemaker', 'NFS Client', 
        'SUSE Manager Client', 'Database', 'RabbitMQ', 'Keystone', 'Ceph',
        'Swift', 'Glance', 'Cinder', 'Neutron', 'Nova', 
        'Horizon', 'Heat', 'Ceilometer', 'Manila', 'Updater',
        'Trove', 'Tempest']),
    browser.back(),
))

section_output('-', 'Crowbar barclamps', lambda: (
    ck.chkdeep('barclamps', '/crowbar/crowbar/1.0', False, [
        'Crowbar', 'Deployer', 'Provisioner', 'IPMI', 'Network',
        'DNS', 'Logging', 'NTP', 'NFS Client', 'SUSE Manager Client',
        'Updater']),
    browser.back(),
))

section_output('-', 'Openstack barclamps', lambda: (
    ck.chkdeep('barclamps', '/crowbar/openstack/1.0', False, [
        'Pacemaker', 'Database', 'RabbitMQ', 'Keystone', 'Ceph',
        'Swift', 'Glance', 'Cinder', 'Neutron', 'Nova',
        'Horizon', 'Heat', 'Ceilometer', 'Manila', 'Trove',
        'Tempest']),
    browser.back(),
))

#section_output('=', 'Help section tests', lambda: (
#    ck.chkdeep('help', '/docs/deployment', True, ['Architecture and Requirements']),
#    ck.chkdeep('help', '/docs/user', True, ['OpenStack command-line clients']),
#    ck.chkdeep('help', '/docs/admin', True, ['How can I administer an OpenStack cloud?']),
#    ck.chkdeep('help', 'docs/supplement', True, ['Changing the SUSE OpenStack Cloud Dashboard Theme']),
#    ck.linkfnd_by_href('https://crowbar.github.io'),
#    browser.back()
#))

section_output('=', 'Results', lambda: (
    print(red + "Errors: " + str(ck.errors) + end),
    print(blue + "Successes: " + str(ck.success) + end),
    print(yellow + "It took: {0:0.1f} seconds".format(time.time() - startTime) + end) 
))
