#!/usr/bin/python
# global imports
import sys
import argparse
import time
from splinter import Browser

# local import
import config

class Colors:

    BLUE = '\033[94m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    END = '\033[0m'

# colors
blue = Colors.BLUE
green = Colors.GREEN
yellow = Colors.YELLOW
red = Colors.RED
end = Colors.END

# argument parser
parser = argparse.ArgumentParser(description="Crowbar auto testsuite, run it via 'gordon -a <address> -p <port>'")
parser.add_argument('address',
        help = "crowbar address, for example 192.168.0.2")
parser.add_argument('port',
        help = "crowbar port, for example 80, 3000")
args = parser.parse_args()
user_address = args.address
user_port = args.port

# 'production' browser
#browser = Browser('phantomjs')
# use real browser for test purposes
browser = Browser('chrome')

url = "http://"+ config.username + ":" + config.password + "@" + user_address + ":" + user_port
browser.visit(url)

class Checker(object):
    
    def __init__(self, browser):
        self.browser = browser
        self.errors = 0
        self.success = 0

    def checktext(self, text):

        if self.browser.is_text_present(text):
            print("%-60s %s" % (text, green + 'PASSED' + end))
            self.success += 1
        else:
            print("%-60s %s" % (text, red + 'FAILED' + end))
            self.errors += 1

    def checkid(self, id):

        if self.browser.is_element_present_by_id(id):
            print("%-60s %s" % (id, green + 'PASSED' + end))
            self.success += 1
        else:
            print("%-60s %s" % (id, red + 'FAILED' + end))
            self.errors += 1

    def linkfnd_by_href(self, link):

        if self.browser.find_link_by_href(link):
            print("%-60s %s" % (link, green + 'PASSED' + end))
            self.success += 1
        else:
            print("%-60s %s" % (link, red + 'FAILED' + end))
            self.errors += 1

    def linkfnd_by_name(self, name):

        if self.browser.find_link_by_text(name):
            print("%-60s %s" % (name, green + 'PASSED' + end))
            self.success += 1
        else:
            print("%-60s %s" % (name, red + 'FAILED' + end))
            self.errors += 1

# switch = boolean, means that we're creating new window in browser(True), or not (False)
    def chkdeep(self, id, link, text, switch):
        
        self.browser.find_by_id(id).first.click()
        self.browser.click_link_by_partial_href(link)
        
        if switch:
            window = self.browser.windows[1]
            window.is_current = True
            for i in text:
                self.checktext(i)
            window.close()
            time.sleep(1)
        else:
            for i in text:
                self.checktext(i) 

# Checking nodes status
    def chkstatus(self, css1, css2):
        
        if self.browser.find_by_css(css1) or self.browser.find_by_css(css2):
            print("%-60s %s" % ("Some nodes have a problem!", red + 'FAILED' + end))
            self.errors += 1
        else:
            print("%-60s %s" % ('Nodes are OK', green + 'PASSED' + end))
            self.success += 1

def section_output(uline, title):
    print()
    print(title)
    print(len(title) * uline)


# check that we can create a new_group
browser.find_by_id('group').first.fill('new_group_1')
browser.find_by_name('commit').first.click()

ck = Checker(browser)

# final output
print("Main page tests")
print('===============')
section_output('*', 'By text')
testsbytext = ['3 nodes', 'crowbar', 'dashboard']
for i in testsbytext:
     ck.checktext(i)

section_output('*', 'By id')
testsbyid = ['nodes', 'dashboard', 'network', 'switch', 'vlan', 'barclamps', 'crowbar', 'openstack', 'utils',
         'queue', 'repositories', 'backup', 'logs', 'swift', 'ucs', 'help']
for i in testsbyid:
     ck.checkid(i)

section_output('*', 'Creating a new group of nodes')
ck.checktext('new_group_1')

section_output('*', 'Link tests')
links = ['http://www.suse.com', 'https://www.suse.com/cloud']
for i in links:
     ck.linkfnd_by_href(i)

section_output('*', 'Nodes status checks')
ck.chkstatus('.led.unknown', '.led.unready')

section_output('=', 'Nodes section tests')
section_output('*', 'Bulk edit tests')
text = ['Bochs, 3.87 GB, 1 Nics']
ck.chkdeep('nodes', '/nodes/list', text, False)
browser.back()
time.sleep(2)

section_output('-', 'Dashboard tests')
text = ['automatic grouping.']
ck.chkdeep('nodes', '/dashboard', text, False)
time.sleep(1)

section_output('-', 'Active Roles tests')
text = ['ceilometer-agent', 'ceilometer-central', 'ceilometer-server', 'ceilometer-swift-proxy-middleware',
         'cinder-controller', 'cinder-volume', 'database-server', 'glance-server', 'heat-server', 'horizon-server',
         'keystone-server', 'manila-server', 'manila-share', 'neutron-server', 'neutron-network', 'nova-controller',
         'nova-compute-kvm', 'rabbitmq-server', 'swift-dispersion', 'swift-proxy', 'swift-ring-compute', 'swift-storage',
         'tempest', 'trove-server']
ck.chkdeep('nodes', '/active_roles',text, False)

section_output('*', 'Roles status checks')
ck.chkstatus('.led.unknown', '.led.unready')
browser.back()

section_output('=', 'Network section tests')
section_output('*', 'Switches')
text = ['Virtual:eth0']
ck.chkdeep('network', '/network/switch/default', text, False)
browser.back()
time.sleep(2)

section_output('*', 'VLANs')
text = ['Active VLAN']
ck.chkdeep('network', '/network/vlan/default', text, False)
browser.back()
time.sleep(2)

section_output('=', 'Help section tests')
text = ['Architecture and Requirements']
ck.chkdeep('help', '/docs/deployment', text, True)
text = ['OpenStack command-line clients']
ck.chkdeep('help', '/docs/user', text, True)
text = ['How can I administer an OpenStack cloud?']
ck.chkdeep('help', '/docs/admin', text, True)
text = ['Changing the SUSE OpenStack Cloud Dashboard Theme']
ck.chkdeep('help', 'docs/supplement', text, True)
ck.linkfnd_by_href('https://crowbar.github.io')

browser.back()

section_output('=', 'Results')
print(yellow + "Errors: " + str(ck.errors) + end)
print(blue + "Successes: " + str(ck.success) + end)
